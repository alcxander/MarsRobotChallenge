Hi! 

You can read this if you like, I wouldn't encourage it though. This is just my mind, thoughts, ideas, observations while working on this. It's here for posterity not for any real advantage of work to the project.




---------------------------------------------------------------


![CodeRabbit Pull Request Reviews](https://img.shields.io/coderabbit/prs/github/alcxander/MarsRobotChallenge?utm_source=oss&utm_medium=github&utm_campaign=alcxander%2FMarsRobotChallenge&labelColor=171717&color=FF570A&link=https%3A%2F%2Fcoderabbit.ai&label=CodeRabbit+Reviews)


---------------------------------------------------------------


resources to consider

storage is no real quick challenge, maybe schema it out so it can be reviesd later, likely going to use prisma or similar if I go typescript. Could use noSQL either. Not sure what I need to define.

Some assumptions, whole thing runs locally, need to trim need for env keys, avoid passing keys from machine to machine. mayb eneed to revisit what storage tech is used. Would like to do something that is easy peasy to enable for another user on another machine. 

Let's set up a database with latest transactions/actions for the robot. Worried about latest state action on the bot and what steps it's taken but I don't want to get caught up managing some global state parameters for the bots steps that the CLI needs special actions for. Maybe we build the table with a session ID to tackle steps, so we have seeded database with maps it can pull from, then when we 'start' a session we pick a tseeded table at random, a start location, then apply the sequence of steps to solve the challenge but we create a session to store this against and ID it on the screen somewhere and in the output for the CLI. if we have a session we can map the routes to the session, and as steps are taken we can hold that as the last state of the bot to pull down. maybe we can push completed steps to a history table for reference to recall. if a session is incomplete we can mark it as incompleted or end step is listed as the last step they took when archived.


what components am I going to need here:

robot class/thing (facing, battery, samples collected, visited cells(should this be robot or terrain or a separate object for history), )
terrain thing (cell, contents, positioning)
commands (processes the actual requests for the robot when doing things like, sequences of commands and handles the logic of what to do when you hit an obstacle or a resource etc.)
a service of some sort to orchestrate these together into a 'function'

need to keep these separate from other things so these are reusable in the API and REST services

cli layer (never built one of these before)
rest api (this comes from page layouts really, should be self done by projce structure)
rest client (takes in the json posts to API shows result, likely be connected to the front end somewhere)

that's the communication layer

visualising and maps

likely going to exist in the app alongside the pages with a simple visualisation page. need some way to cordon off sessions

don't forget! 
battery costs, is that it's own typing on the move sets that can be peformed?
back of fstrategies, put in a 1 check sum at the start of every maneuver. also a 0 check as well to give up why not
terrain seeding strategies
json linter for examples provided, need to extend them to include session IDs,
unit tests - code rabbit for this. Need something to know the cli works

two routes here, attempted publishing on npmjs and then pulling the package back down 
----------------------


building in cli should i try something like build an application from scratch dependency by dependency or should i 
build a web application like normal and extend it out to accommodate cli......hmmmmmm

----------------------

29th 07 2025

getting a skeleton from an AI tool has made the start of this both easy and tough. Need to dig through and check the typing
across the project

on installation and first run note the install section has some weird dependencies, the system setup has picked some  dependencies that when cross checked aren't supported, will need to check and pull apart the dependencies and see what won't work.

need to install get functing and had to use --legacy-peer-deps #issue to get the system started, might try use some linter 
to see if I can pull apart these dependencies.


# testing initial skeleton

#question what does battery do on input? is that supposed to limit the battery intake that can be used per run?

#question At every moment, the robot contains an internal battery which provides a certain capacity, what is that capacity? going to assume infinite while starting out

#result the site runs, what do we note. input seems correct, output does not seem correct. we have visited cells, we have samples collected, final position, battery, direction facing. This partially presents correctly on the UI, the visited cells don't show numbers but map correctly. 

Looks like we stop at the boundary

{
  "terrain": [["Fe", "Se", "Si"], ["W", "Zn", "Fe"]],
  "battery": 10,
  "commands": ["F", "S", "R", "F"],
  "initialPosition": {
    "location": {"x": 0, "y": 0},
    "facing": "East"
  }
}

this use case should trigger the robot to want to refuel and should end up at 3 units. expected interaction:
10 units - move 7 - fail sample refuel (question here again about max, max can't be 10 as input shows 50 in test data) -refuel by 10 to 16 (-1 cost on action) - minus 8 for sample to 8 - minus 2 for turn right - minus 3 for forward to get to 3.

this result seems to work so the refuel seems to be working. 

#observation, alot of 'does this do what I think it does' is happening on project creation. It's like importing a complex component and now testing to see if it works as intended. Is this actually better than building it out? Maybe. :)

#observation we don't track when and what evasive procedures are invoked which makes tracking battery usage impossible, may add this just to make my own life easier for testing results


in simulation cases add section that says if battery is ever 0 while doing an action then break and produce error to show user

#question currently when a sample is collected should we remove that from the terrain so it can't be picked up a second time?

------------------------------------------

to build still, CLI, REST server, separate the existing API route maybe, build out the commander (maybe).

------------------------------------------


potential structure

app
src -
cli
server
logic

let's figure out what goes in each one


looking at the cli structure, lot's of it looks ok but WHY does it not reuse the logic that was built elsewhere in simulator.ts? Weird it did that so now will rebuild the cli script to (loosely along these lines) import the simulator, create instance of the simulator class in the CLI processor then just pass the input in.  

npx tsc lib/robot-simulator.ts -- make accessible version for CLI to run

cli tasks add bin and executable to CLI Script

renamed
chmod +x scripts/marsRobot.mjs
executable
npm installed (with legacy peer deps)
npm link needed for cli to work as desired in the requirements.

could also push this to npmjs and make it installable, that would also work.


---------------
30/07 14:18
rest server is working and serving
can run from command line the command 'marsrobotapi', that starts the server which can then be queried at /api/simulate

PS C:\Users\Dextosterone\git\MarsRobotChallenge> curl.exe -X POST http://localhost:3000/api/simulate -H "Content-Type: application/json" -d @sample-input.json | ConvertFrom-Json | ConvertTo-Json -Depth 10
curl.exe :   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
At line:1 char:1
+ curl.exe -X POST http://localhost:3000/api/simulate -H "Content-Type: ...
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (  % Total    % ...  Time  Current:String) [], RemoteException
    + FullyQualifiedErrorId : NativeCommandError
 
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
100   444    0   191  100   253  31373  41557 --:--:-- --:--:-- --:--:-- 74000
{
    "VisitedCells":  [
                         {
                             "x":  0,
                             "y":  0
                         },
                         {
                             "x":  1,
                             "y":  0
                         },
                         {
                             "x":  1,
                             "y":  1
                         },
                         {
                             "x":  1,
                             "y":  2
                         },
                         {
                             "x":  2,
                             "y":  2
                         }
                     ],
    "SamplesCollected":  [
                             "Fe",
                             "Si"
                         ],
    "Battery":  24,
    "FinalPosition":  {
                          "Location":  {
                                           "x":  1,
                                           "y":  2
                                       },
                          "Facing":  "East"
                      }
}

PS C:\Users\Dextosterone\git\MarsRobotChallenge> 

-------------------------------------------------------

5-bug-simulator-not-checking-terrain-types

fixing this issue exposed another issue, the tsx compiled code for the cli bot lives in the same folder as the other simulator, not normally an issue but the router points its import at 
import { simulateRobot, type RobotInput } from "@/lib/robot-simulator"
and a next project SHOULD be picking the ts over the js but for some reason it isn't. 



------------------------------

cli mode test and results
with server running through npm dev
 marsRobotCLI1 sample-input.json output.json
Loaded robot-simulator.js
Terrain matrix: [["Fe","Fe","Se","W"],["W","Si","Obs","Zn"],["Fe","W","Si","Se"]]
Simulation complete. Output: {
  VisitedCells: [
    { x: 0, y: 0 },
    { x: 1, y: 0 },
    { x: 1, y: 1 },
    { x: 1, y: 2 },
    { x: 2, y: 2 }
  ],
  SamplesCollected: [ 'Fe', 'Si' ],
  Battery: 24,
  FinalPosition: { Location: { x: 1, y: 2 }, Facing: 'East' }      
}
Done. Output written to:  output.json

-----------------------------------------------

rest API client mode

needed to do some moving about and fixing things for this annoyingly, looks like some esm commjs conflict came up that I didnt 
catch earlier. going to align all modules to esm though.

 C:\Users\Dextosterone\git\MarsRobotChallenge> marsRobotAPIServer2 sample-input.json
Sending request to Mars Robot API...
Input file: sample-input.json

=== MARS ROBOT SIMULATION RESULTS ===

🔋 Battery Level: 24 units
📍 Final Position: (1, 2) facing East

🗺️  Visited Cells (5):
   1. (0, 0)
   2. (1, 0)
   3. (1, 1)
   4. (1, 2)
   5. (2, 2)

🧪 Samples Collected (2):
   1. Fe
   2. Si

=====================================


-----------------------------------------------


rest api server mode 

running
PS C:\Users\Dextosterone\git\MarsRobotChallenge> marsRobotAPIServer2
🚀 MarsRobot API server running on http://localhost:3000
Test this out with Postman or similar or curl at the endpoint. 
Sample CURL Command for Windows works well if you run in same folder otherwise update the sampleinput json path fully if running elsewhere.
curl.exe -X POST http://localhost:3000/api/simulate -H "Content-Type: application/json" -d @sample-input.json | ConvertFrom-Json | ConvertTo-Json -Depth 10

and if i run one of the other commands it works just fine


Mobbin used images for design


------------------------------------------


 ✓ tests/marsRobotCLILogic.test.js (5 tests) 16ms
   ✓ marsRobotCLILogic > prints help when no args 9ms
   ✓ marsRobotCLILogic > prints version with --version 1ms
   ✓ marsRobotCLILogic > prints error on incorrect number of args 2ms
   ✓ marsRobotCLILogic > runs simulation and writes output 2ms
   ✓ marsRobotCLILogic > handles JSON parse error gracefully 1ms

 Test Files  1 passed (1)
      Tests  5 passed (5)
   Start at  12:58:28
   Duration  79ms

 PASS  Waiting for file changes...
       press h to show help, press q to quit


cli overhauled to get better test coverage

> marsrobot@0.5.3 test:coverage
> vitest --coverage


 DEV  v3.2.4 C:/Users/Dextosterone/git/MarsRobotChallenge
      Coverage enabled with v8

stdout | tests/marsRobotApi.test.js > MarsRobot API server
Test server started on http://localhost:4000

stdout | tests/marsRobotApi.test.js > MarsRobot API server
Test server closed on http://localhost:4000

 ✓ tests/marsRobotApi.test.js (3 tests) 72ms
 ✓ tests/marsRobotCLILogic.test.js (5 tests) 24ms

 RERUN  scripts/marsRobotAPIClientMode.mjs 

 ✓ tests/simulator-results.test.ts (1 test) 1426ms
   ✓ makeRequest > should call API and return expected known data results  1423ms
stdout | tests/api-client-basic-validation.test.ts > makeRequest > should call API with malformed data and return invalid JSON
error response: Invalid terrain: must be a non-empty 2D array

 ✓ tests/api-client-basic-validation.test.ts (5 tests) 2165ms
   ✓ makeRequest > should call API and return data  1400ms

 Test Files  2 passed (2)
      Tests  6 passed (6)
   Start at  15:37:11
   Duration  3.78s

 % Coverage report from v8
----------------------------|---------|----------|---------|---------|-------------------------
File                        | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s
----------------------------|---------|----------|---------|---------|-------------------------
All files                   |      40 |     62.5 |   33.33 |      40 | 
 marsRobotAPIClientMode.mjs |      40 |     62.5 |   33.33 |      40 | 47-48,53,61-125,130-131
----------------------------|---------|----------|---------|---------|-------------------------
 PASS  Waiting for file changes...
       press h to show help, press q to quit

test results
> marsrobot@0.5.3 test:coverage
> vitest --coverage


 DEV  v3.2.4 C:/Users/Dextosterone/git/MarsRobotChallenge
      Coverage enabled with v8

stdout | tests/marsRobotApi.test.js > MarsRobot API server
Test server started on http://localhost:4000

 ✓ tests/simulator-results.test.ts (1 test) 68ms
stdout | tests/marsRobotApi.test.js > MarsRobot API server
Test server closed on http://localhost:4000

 ✓ tests/marsRobotCLILogic.test.js (5 tests) 19ms
 ✓ tests/marsRobotApi.test.js (3 tests) 63ms
stdout | tests/api-client-basic-validation.test.ts > makeRequest > should call API with malformed data and return invalid JSON
error response: Invalid terrain: must be a non-empty 2D array

 ✓ tests/api-client-basic-validation.test.ts (5 tests) 542ms

 Test Files  4 passed (4)
      Tests  14 passed (14)
   Start at  15:45:56
   Duration  2.54s (transform 304ms, setup 0ms, collect 709ms, tests 692ms, environment 2ms, prepare 1.90s)

 % Coverage report from v8
-------------------------------------|---------|----------|---------|---------|-------------------------
File                                 | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s
-------------------------------------|---------|----------|---------|---------|-------------------------
All files                            |    2.09 |    25.55 |    2.94 |    2.09 | 
 MarsRobotChallenge                  |       0 |        0 |       0 |       0 | 
  next.config.mjs                    |       0 |        0 |       0 |       0 | 1-14
  postcss.config.mjs                 |       0 |        0 |       0 |       0 | 1-8
  tailwind.config.ts                 |       0 |        0 |       0 |       0 | 1-98
 MarsRobotChallenge/app              |       0 |        0 |       0 |       0 | 
  layout.tsx                         |       0 |        0 |       0 |       0 | 1-31
  page.tsx                           |       0 |        0 |       0 |       0 | 1-343
 MarsRobotChallenge/app/api/simulate |       0 |        0 |       0 |       0 | 
  route.ts                           |       0 |        0 |       0 |       0 | 1-22
 MarsRobotChallenge/components       |       0 |        0 |       0 |       0 | 
  theme-provider.tsx                 |       0 |        0 |       0 |       0 | 1-11
 MarsRobotChallenge/components/ui    |       0 |        0 |       0 |       0 | 
  accordion.tsx                      |       0 |        0 |       0 |       0 | 1-58                    
  alert-dialog.tsx                   |       0 |        0 |       0 |       0 | 1-141
  alert.tsx                          |       0 |        0 |       0 |       0 | 1-59
  aspect-ratio.tsx                   |       0 |        0 |       0 |       0 | 1-5
  avatar.tsx                         |       0 |        0 |       0 |       0 | 1-50
  badge.tsx                          |       0 |        0 |       0 |       0 | 1-36
  breadcrumb.tsx                     |       0 |        0 |       0 |       0 | 1-115
  button.tsx                         |       0 |        0 |       0 |       0 | 1-56
  calendar.tsx                       |       0 |        0 |       0 |       0 | 1-213
  card.tsx                           |       0 |        0 |       0 |       0 | 1-79
  carousel.tsx                       |       0 |        0 |       0 |       0 | 1-262
  chart.tsx                          |       0 |        0 |       0 |       0 | 1-365
  checkbox.tsx                       |       0 |        0 |       0 |       0 | 1-30
  collapsible.tsx                    |       0 |        0 |       0 |       0 | 1-9
  command.tsx                        |       0 |        0 |       0 |       0 | 1-153
  context-menu.tsx                   |       0 |        0 |       0 |       0 | 1-200
  dialog.tsx                         |       0 |        0 |       0 |       0 | 1-122
  drawer.tsx                         |       0 |        0 |       0 |       0 | 1-118
  dropdown-menu.tsx                  |       0 |        0 |       0 |       0 | 1-200
  form.tsx                           |       0 |        0 |       0 |       0 | 1-178
  hover-card.tsx                     |       0 |        0 |       0 |       0 | 1-29
  input-otp.tsx                      |       0 |        0 |       0 |       0 | 1-71
  input.tsx                          |       0 |        0 |       0 |       0 | 1-22
  label.tsx                          |       0 |        0 |       0 |       0 | 1-26
  menubar.tsx                        |       0 |        0 |       0 |       0 | 1-236
  navigation-menu.tsx                |       0 |        0 |       0 |       0 | 1-128
  pagination.tsx                     |       0 |        0 |       0 |       0 | 1-117
  popover.tsx                        |       0 |        0 |       0 |       0 | 1-31
  progress.tsx                       |       0 |        0 |       0 |       0 | 1-28
  radio-group.tsx                    |       0 |        0 |       0 |       0 | 1-44
  resizable.tsx                      |       0 |        0 |       0 |       0 | 1-45
  scroll-area.tsx                    |       0 |        0 |       0 |       0 | 1-48
  select.tsx                         |       0 |        0 |       0 |       0 | 1-160
  separator.tsx                      |       0 |        0 |       0 |       0 | 1-31
  sheet.tsx                          |       0 |        0 |       0 |       0 | 1-140
  sidebar.tsx                        |       0 |        0 |       0 |       0 | 1-763
  skeleton.tsx                       |       0 |        0 |       0 |       0 | 1-15
  slider.tsx                         |       0 |        0 |       0 |       0 | 1-28
  sonner.tsx                         |       0 |        0 |       0 |       0 | 1-31
  switch.tsx                         |       0 |        0 |       0 |       0 | 1-29
  table.tsx                          |       0 |        0 |       0 |       0 | 1-117
  tabs.tsx                           |       0 |        0 |       0 |       0 | 1-55
  textarea.tsx                       |       0 |        0 |       0 |       0 | 1-22
  toast.tsx                          |       0 |        0 |       0 |       0 | 1-129
  toaster.tsx                        |       0 |        0 |       0 |       0 | 1-35
  toggle-group.tsx                   |       0 |        0 |       0 |       0 | 1-61
  toggle.tsx                         |       0 |        0 |       0 |       0 | 1-45
  tooltip.tsx                        |       0 |        0 |       0 |       0 | 1-30
  use-mobile.tsx                     |       0 |        0 |       0 |       0 | 1-19
  use-toast.ts                       |       0 |        0 |       0 |       0 | 1-194                   
 MarsRobotChallenge/hooks            |       0 |        0 |       0 |       0 | 
  use-mobile.tsx                     |       0 |        0 |       0 |       0 | 1-19
  use-toast.ts                       |       0 |        0 |       0 |       0 | 1-194
 MarsRobotChallenge/lib              |       0 |        0 |       0 |       0 | 
  robot-simulator.ts                 |       0 |        0 |       0 |       0 | 1-341
  utils.ts                           |       0 |        0 |       0 |       0 | 1-6
 MarsRobotChallenge/scripts          |   64.31 |    82.14 |   33.33 |   64.31 | 
  marsRobotAPIClientMode.mjs         |      40 |     62.5 |   33.33 |      40 | 47-48,53,61-125,130-131
  marsRobotApi.js                    |     100 |      100 |     100 |     100 | 
  marsRobotApiStartServer.js         |       0 |        0 |       0 |       0 | 1-11
  marsRobotCLI.js                    |       0 |        0 |       0 |       0 | 1-8
  marsRobotCLILogic.js               |     100 |      100 |     100 |     100 | 
 MarsRobotChallenge/scripts/Archive  |       0 |        0 |       0 |       0 | 
  marsRobot previous version.js      |       0 |        0 |       0 |       0 | 1-80
-------------------------------------|---------|----------|---------|---------|-------------------------
 PASS  Waiting for file changes...
       press h to show help, press q to quit


-----------------------------


# MarsRobotChallenge
code challenge to be built as part of interview process


Implementation Requirements
• Console application in your chosen language
• Same simulation logic across all execution modes
• Proper error handling for invalid inputs and network failures
• Clean separation between robot logic and interface layers

# Submission Requirements
☐ Working solution meeting all requirements
☐ All three execution modes functional
☐ Test suite covering functionality
☐ README with setup instructions
☐ Clean Git repository with meaningful commit messages, logical commit structure, and proper
.gitignore
☐ Brief notes on AI tool usage: which tools you used for what tasks, and examples of how you
reviewed, modified, or improved AI-generated output (if applicable)

# Optional Extensions
These extensions are intentionally open-ended to encourage AI tool usage for rapid prototyping and
implementation.

# Robot Visualization
Create a simple web-based visualization showing robot movement on the terrain. A basic 2D topdown view is sufficient - showing the grid, robot position, path taken, and samples collected. Use
any web technology you prefer (HTML5 Canvas, SVG, React, etc.).

# Interactive CLI Visualization
Create an interactive CLI interface where you can input commands and see the updated terrain and
robot state. A basic text-based display is sufficient - showing the terrain grid as ASCII characters,
robot position and facing direction, and current battery/samples. Use any CLI library or framework
available in your chosen language.

# Pathfinding Intelligence
Create a pathfinding system that analyzes terrain and generates optimal command sequences for
the robot. Consider battery constraints, obstacle avoidance, and mission objectives. Implement
algorithms for:
- Exploring the entire map and collecting samples of each terrain type
- Navigating from any point A to point B efficiently
Use any approach you prefer (A*, Dijkstra, custom algorithms, etc.). The system should integrate
with your existing robot simulation.



---------------------------------------------------------------


### Testing REST API with curl

run dev i.e. npm run dev

have a json in the local folder named sample-input.json

```
curl.exe -X POST http://localhost:3000/api/simulate -H "Content-Type: application/json" -d @sample-input.json | ConvertFrom-Json | ConvertTo-Json -Depth 10
```

also added to scripts so you can run 

'npm run marsBot1' 

In the terminal. It's currently set to 'sample-input.json' only though sorry. 



![CodeRabbit Pull Request Reviews](https://img.shields.io/coderabbit/prs/github/alcxander/MarsRobotChallenge?utm_source=oss&utm_medium=github&utm_campaign=alcxander%2FMarsRobotChallenge&labelColor=171717&color=FF570A&link=https%3A%2F%2Fcoderabbit.ai&label=CodeRabbit+Reviews)


---------------------------------------------------------------

resources to consider

storage is no real quick challenge, maybe schema it out so it can be reviesd later, likely going to use prisma or similar if I go typescript. Could use noSQL either. Not sure what I need to define.

Some assumptions, whole thing runs locally, need to trim need for env keys, avoid passing keys from machine to machine. mayb eneed to revisit what storage tech is used. Would like to do something that is easy peasy to enable for another user on another machine. 

Let's set up a database with latest transactions/actions for the robot. Worried about latest state action on the bot and what steps it's taken but I don't want to get caught up managing some global state parameters for the bots steps that the CLI needs special actions for. Maybe we build the table with a session ID to tackle steps, so we have seeded database with maps it can pull from, then when we 'start' a session we pick a tseeded table at random, a start location, then apply the sequence of steps to solve the challenge but we create a session to store this against and ID it on the screen somewhere and in the output for the CLI. if we have a session we can map the routes to the session, and as steps are taken we can hold that as the last state of the bot to pull down. maybe we can push completed steps to a history table for reference to recall. if a session is incomplete we can mark it as incompleted or end step is listed as the last step they took when archived.


what components am I going to need here:

robot class/thing (facing, battery, samples collected, visited cells(should this be robot or terrain or a separate object for history), )
terrain thing (cell, contents, positioning)
commands (processes the actual requests for the robot when doing things like, sequences of commands and handles the logic of what to do when you hit an obstacle or a resource etc.)
a service of some sort to orchestrate these together into a 'function'

need to keep these separate from other things so these are reusable in the API and REST services

cli layer (never built one of these before)
rest api (this comes from page layouts really, should be self done by projce structure)
rest client (takes in the json posts to API shows result, likely be connected to the front end somewhere)

that's the communication layer

visualising and maps

likely going to exist in the app alongside the pages with a simple visualisation page. need some way to cordon off sessions

don't forget! 
battery costs, is that it's own typing on the move sets that can be peformed?
back of fstrategies, put in a 1 check sum at the start of every maneuver. also a 0 check as well to give up why not
terrain seeding strategies
json linter for examples provided, need to extend them to include session IDs,
unit tests - code rabbit for this. Need something to know the cli works



CLI works after publishing and installing the project 
PS C:\Users\Dextosterone\git\MarsRobotChallenge> marsRobot sample-input.json output.json
Simulation complete. Output: {
  VisitedCells: [
    { x: 0, y: 0 },
    { x: 1, y: 0 },
    { x: 1, y: 1 },
    { x: 1, y: 2 },
    { x: 2, y: 2 }
  ],
  SamplesCollected: [ 'Fe', 'Si' ],
  Battery: 24,
  FinalPosition: { Location: { x: 1, y: 2 }, Facing: 'East' }      
}
Done.


C:\Users\Dextosterone>marsRobot
Usage: marsRobotCli.js <input.json> <output.json>

works globally also now as a result. 